from chromadb import Client
from Nexus import NexusEmbeddingFunction, globalNexus
from collections import deque
from MemoryTypes import RecollectionLevel, MemoryLevel, MemoryEntry
from LongTermMemory import longTermMemory
from typing import List

basePriority = 500

class ShortTermMemory(object):
  def __init__(self):
    self.persistent = False
    self.client = Client()
    self.recallMemory = self.client.get_or_create_collection("recallMemory", embedding_function=NexusEmbeddingFunction())
    self.recollectionContext : List[MemoryEntry] = []
    self.recollectionQueries : List[str] = []
 

  def ElicitMemory(self, text, proxy):
    themes = longTermMemory.GetItemsByTreshold(proxy=proxy, memoryLevel=MemoryLevel.Thematic, threshold=1.4, queryText=text, where={"proxy":  { "$eq": proxy.name }})

  
  def DiscardMemory(self):
    pass
  
  
  def PrioritizeMemory(self):
    pass
 
###############################################################
################# Short Term Memory Object ####################
###############################################################
shortTermMemory = ShortTermMemory()    